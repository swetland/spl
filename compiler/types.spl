// Copyright 2023, Brian Swetland <swetland@frotz.net>
// Licensed under the Apache License, Version 2.0.

// ================================================================
// data types

struct String {
	next *String,
	len u32,
	text [256]u8,
};

enum SymbolKind {
	SYMBOL_VAR,
	SYMBOL_FLD, // struct field
	SYMBOL_PTR, // struct *field
	SYMBOL_DEF, // enum
	SYMBOL_FN,
};

struct Symbol {
	next *Symbol,
	name *String,
	type *Type,
	kind SymbolKind,
};

enum ScopeKind {
	SCOPE_GLOBAL,
	SCOPE_FUNC,
	SCOPE_BLOCK,
	SCOPE_LOOP,
	SCOPE_STRUCT,
};

struct Scope {
	parent *Scope,
	first *Symbol,
	last *Symbol,
	kind ScopeKind,
};

enum TypeKind {
	TYPE_VOID,
	TYPE_BOOL,
	TYPE_U8,
	TYPE_U32,
	TYPE_I32,
	TYPE_NIL,
	TYPE_POINTER,
	TYPE_ARRAY,
	TYPE_SLICE,
	TYPE_STR,
	TYPE_STRUCT,
	TYPE_FN,
	TYPE_ENUM,
	TYPE_UNDEFINED,
};

struct Type {
	next *Type,
	name *String,
	of *Type,      // for slice, array, ptr, fn (return type)
	list *Symbol,  // for struct (fields), fn (params)
	kind TypeKind,
	count u32,
};

// ================================================================
// Abstract Syntax Tree

enum AstKind {
// top node
	AST_PROGRAM,  // l=FUNC*
// program components (chained into a list by next)
	AST_FUNC,     // l=BLOCK
// container of statements
	AST_BLOCK,    // l=STMT*
// statements (chained into a list by next)
	AST_EXPR,     // l=EXPR
	AST_WHILE,    // l=EXPR r=BLOCK
	AST_BREAK,
	AST_CONTINUE,
	AST_RETURN,   // l=EXPR
	AST_IF,       // l=CASE*
// sub-parts of if
	AST_CASE,     // l=EXPR r=BLOCK
	AST_ELSE,     // l=BLOCK
// expressions
	AST_SYMBOL,
	AST_CONST,    // numeric constant
	AST_STRING,   // string constant
	AST_DEREF,    // l=EXPR type: pointer-to-...
	AST_INDEX,    // l=EXPR type: array-of-...  r=EXPR index
	AST_FIELD,    // l=EXPR type: struct        r=SYMBOL field
	AST_ADDROF,   // l=EXPR type: lvalue
	AST_CALL,     // l=NAME r=EXPR*
	AST_ASSIGN,   // l=lhsEXPR r=rhsEXPR
	AST_NEW,      // l=TYPE
// binary expressions
	// Rel Ops (maintain order matched w/ lexer)
	AST_EQ, AST_NE, AST_LT, AST_LE, AST_GT, AST_GE,
	// Add Ops (maintain order matched w/ lexer)
	AST_ADD, AST_SUB, AST_OR, AST_XOR,
	// Mul Ops (maintain order matched w/ lexer)
	AST_MUL, AST_DIV, AST_MOD, AST_AND, AST_LSL, AST_LSR,
	// uncategorized ops
	AST_NOT, AST_BOOL_AND, AST_BOOL_OR, AST_BOOL_NOT, AST_NEG,
	AST_KIND_COUNT,
};

var ast_kind []str = {
	"PROGRAM", "FUNC",
	"BLOCK", "EXPR", "WHILE", "BREAK", "CONTINUE",
	"RETURN", "IF", "CASE", "ELSE",
	"SYMBOL", "CONST", "STRING",
	"DEREF", "INDEX", "FIELD", "ADDROF", "CALL", "ASSIGN", "NEW",
	"EQ", "NE", "LT", "LE", "GT", "GE",
	"ADD", "SUB", "OR", "XOR",
	"MUL", "DIV", "MOD", "AND", "LSL", "LSR",
	"NOT", "BOOL AND", "BOOL OR", "BOOL NOT", "NEG",
};

fn ast_is_relop(kind AstKind) bool {
	return (kind >= AST_EQ) && (kind <= AST_GE);
}

fn ast_is_addop(kind AstKind) bool {
	return (kind >= AST_ADD) && (kind <= AST_XOR);
}

fn ast_is_mulop(kind AstKind) bool {
	return (kind >= AST_MUL) && (kind <= AST_LSR);
}

fn ast_is_binop(kind AstKind) bool {
	return (kind >= AST_EQ) && (kind <= AST_LSR);
}

fn ast_is_expr(kind AstKind) bool {
	return (kind >= AST_SYMBOL);
}

fn ast_is_stmt(kind AstKind) bool {
	return (kind >= AST_EXPR) && (kind <= AST_ELSE);
}

struct Ast {
	kind AstKind,

	left *Ast,
	right *Ast,
	next *Ast, // intrusive list

	ival u32,
	name *String,
	sym *Symbol,
	type *Type,

	srcloc u32, // linenumber for now
};


// ================================================================
// lexical scanner tokens

// token classes (tok & tcMASK)
enum TokenClass{
	tcRELOP = 0x08, tcADDOP = 0x10, tcMULOP = 0x18,
	tcAEQOP = 0x20, tcMEQOP = 0x28, tcMASK = 0xF8,
};

enum Token {
	// EndMarks, Braces, Brackets Parens
	tEOF, tEOL, tOBRACE, tCBRACE, tOBRACK, tCBRACK, tOPAREN, tCPAREN,
	// RelOps (do not reorder)
	tEQ, tNE, tLT, tLE, tGT, tGE, tx0E, tx0F,
	// AddOps (do not reorder)
	tPLUS, tMINUS, tPIPE, tCARET, tx14, tx15, tx16, tx17,
	// MulOps (do not reorder)
	tSTAR, tSLASH, tPERCENT, tAMP, tLEFT, tRIGHT, tx1E, tx1F,
	// AsnOps (do not reorder)
	tADDEQ, tSUBEQ, tOREQ, tXOREQ, tx24, tx25, tx26, tx27,
	tMULEQ, tDIVEQ, tMODEQ, tANDEQ, tLSEQ, tRSEQ, t2E, t2F,
	// Various, UnaryNot, LogicalOps,
	tSEMI, tCOLON, tDOT, tCOMMA, tNOT, tAND, tOR, tBANG,
	tASSIGN, tINC, tDEC,
	tAT,
	// Keywords
	tNEW, tFN, tSTRUCT, tVAR, tENUM,
	tIF, tELSE, tWHILE,
	tBREAK, tCONTINUE, tRETURN,
	tFOR, tSWITCH, tCASE,
	tTRUE, tFALSE, tNIL,
	tIDN, tNUM, tSTR,
	// used internal to the lexer but never returned
	tSPC, tINV, tDQT, tSQT, tMSC,
};

var tnames []str = {
	"<EOF>", "<EOL>", "{",  "}",  "[",   "]",   "(",   ")",
	"==",    "!=",    "<",  "<=", ">",   ">=",  "",    "",
	"+",     "-",     "|",  "^",  "",    "",    "",    "",
	"*",     "/",     "%",  "&",  "<<",  ">>",  "",    "",
	"+=",    "-=",    "|=", "^=", "",    "",    "",    "",
	"*=",    "/=",    "%=", "&=", "<<=", ">>=", "",    "",
	";",     ":",     ".",  ",",  "~",   "&&",  "||",  "!",
	"=",     "++",    "--",
	"@",
	"new", "fn", "struct", "var", "enum",
	"if", "else", "while",
	"break", "continue", "return",
	"for", "switch", "case",
	"true", "false", "nil",
	"<ID>", "<NUM>", "<STR>",
	"<SPC>", "<INV>", "<DQT>", "<SQT>", "<MSC>",
};


// ================================================================
// lexer / parser / compiler context

struct Context {
	filename str,		// filename of active source
	outname str,		// base name for output files

	linenumber u32,		// line number of most recent line
	lineoffset u32,		// position of start of most recent line
	byteoffset u32,		// position of the most recent character
	flags u32,
	cc u32,			// scanner: next character

	tok Token,		// most recent token
	num u32,		// for tNUM
	tmp [256]u8,		// for tIDN, tSTR
	ident *String,		// for tSTR

	stringlist *String,	// intern table
	typelist *Type,		// all types

	scope *Scope,		// top of Scope stack
	global *Scope,		// the global scope
	cur_fn *Symbol,		// fn being parsed

	idn_if *String,		// identifier strings
	idn_fn *String,
	idn_for *String,
	idn_var *String,
	idn_nil *String,
	idn_new *String,
	idn_case *String,
	idn_else *String,
	idn_enum *String,
	idn_true *String,
	idn_break *String,
	idn_while *String,
	idn_false *String,
	idn_switch *String,
	idn_struct *String,
	idn_return *String,
	idn_continue *String,

	type_void *Type,
	type_bool *Type,
	type_str *Type,
	type_nil *Type,
	type_u32 *Type,
	type_i32 *Type,
	type_u8 *Type,
};

var ctx Context;

fn string_make(text str, len u32) String {
	var s String = ctx.stringlist;
	while s != nil {
		if (s.len == len) && strneq(text, s.text, len) {
			return s;
		}
		s = s.next;
	}
	s = new(String);
	s.len = len;
	strcpyn(s.text, text, len + 1);
	s.next = ctx.stringlist;
	ctx.stringlist = s;
	return s;
}

fn scope_push(kind ScopeKind) Scope {
	var scope Scope = new(Scope);
	scope.first = nil;
	scope.last = nil;
	scope.parent = ctx.scope;
	scope.kind = kind;
	ctx.scope = scope;
	return scope;
}

// returns symbol list for the popped scope
fn scope_pop() Symbol {
	var scope Scope = ctx.scope;
	ctx.scope = scope.parent;
	return scope.first;
}

fn scope_find(kind ScopeKind) Scope {
	var scope Scope = ctx.scope;
	while scope != nil {
		if scope.kind == kind {
			return scope;
		}
		scope = scope.parent;
	}
	return nil;
}

fn symbol_find_in(name String, scope Scope) Symbol {
	var sym Symbol = scope.first;
	while sym != nil {
		if sym.name == name {
			return sym;
		}
		sym = sym.next;
	}
	return nil;
}

// find the first surrounding scope of a specified kind
fn symbol_find(name String) Symbol {
	var scope Scope = ctx.scope;
	while scope != nil {
		var sym Symbol = symbol_find_in(name, scope);
		if sym != nil {
			return sym;
		}
		scope = scope.parent;
	}
	return nil;
}

fn symbol_make_in_scope(name String, type Type, scope Scope) Symbol {
	var sym Symbol = new(Symbol);
	sym.name = name;
	sym.type = type;
	sym.next = nil;
	sym.kind = SYMBOL_VAR;
	if scope.first == nil {
		scope.first = sym;
	} else {
		scope.last.next = sym;
	}
	scope.last = sym;
	return sym;
}

fn symbol_make_global(name String, type Type) Symbol {
	return symbol_make_in_scope(name, type, ctx.global);
}

fn symbol_make(name String, type Type) Symbol {
	return symbol_make_in_scope(name, type, ctx.scope);
}

fn type_make(name String, kind TypeKind, of Type, list Symbol, count u32) Type {
	var type Type = new(Type);
	type.name = name;
	type.of = of;
	type.list = list;
	type.kind = kind;
	type.count = count;
	if name != nil {
		type.next = ctx.typelist;
		ctx.typelist = type;
	} else {
		type.next = nil;
	}
	return type;
}

fn type_find(name String) Type {
	var t Type = ctx.typelist;
	while t != nil {
		if t.name == name {
			return t;
		}
		t = t.next;
	}
	return nil;
}

fn type_find_field(type Type, name String) Symbol {
	if type.kind != TYPE_STRUCT {
		error("not a struct");
	}
	var s Symbol = type.list;
	while s != nil {
		if s.name == name {
			return s;
		}
		s = s.next;
	}
	error("struct has no such field '", @str name.text, "'");
	return nil;
}

fn ast_make(kind AstKind, ival u32, name String, sym Symbol, type Type) Ast {
	var node Ast = new(Ast);
	node.kind = kind;
	node.ival = ival;
	node.name = name;
	node.sym = sym;
	node.type = type;
	node.srcloc = ctx.linenumber;
	return node;
}

fn ast_make_lr(kind AstKind, left Ast, right Ast) Ast {
	var node Ast = ast_make(kind, 0, nil, nil, nil);
	node.left = left;
	node.right = right;
	return node;
}

fn ast_make_l(kind AstKind, child Ast) Ast {
	var node Ast = ast_make(kind, 0, nil, nil, nil);
	node.left = child;
	return node;
}

fn ast_make_simple(kind AstKind, x u32) Ast {
	return ast_make(kind, x, nil, nil, nil);
}

fn ast_make_const(value u32, type Type) Ast {
	return ast_make(AST_CONST, value, nil, nil, type);
}

fn ast_make_symbol(name String, sym Symbol) Ast {
	// TODO maybe handle nil sym differently?
	var type Type = nil;
	if sym != nil {
		type = sym.type;
	}
	return ast_make(AST_SYMBOL, 0, name, sym, type);
}

fn ctx_init() {
	ctx = new(Context);

	ctx.idn_if       = string_make("if", 2);
	ctx.idn_fn       = string_make("fn", 2);
	ctx.idn_for      = string_make("for", 3);
	ctx.idn_var      = string_make("var", 3);
	ctx.idn_nil      = string_make("nil", 3);
	ctx.idn_new      = string_make("new", 3);
	ctx.idn_case     = string_make("case", 4);
	ctx.idn_else     = string_make("else", 4);
	ctx.idn_enum     = string_make("enum", 4);
	ctx.idn_true     = string_make("true", 4);
	ctx.idn_break    = string_make("break", 5);
	ctx.idn_while    = string_make("while", 5);
	ctx.idn_false    = string_make("false", 5);
	ctx.idn_switch   = string_make("switch", 6);
	ctx.idn_struct   = string_make("struct", 6);
	ctx.idn_return   = string_make("return", 6);
	ctx.idn_continue = string_make("continue", 8);

	ctx.type_void    = type_make(string_make("void", 4), TYPE_VOID, nil, nil, 0);
	ctx.type_bool    = type_make(string_make("bool", 4), TYPE_BOOL, nil, nil, 0);
	ctx.type_nil     = type_make(string_make("nil", 3),  TYPE_NIL,  nil, nil, 0);
	ctx.type_str     = type_make(string_make("str", 3),  TYPE_STR,  nil, nil, 0);
	ctx.type_u32     = type_make(string_make("u32", 3),  TYPE_U32,  nil, nil, 0);
	ctx.type_i32     = type_make(string_make("i32", 3),  TYPE_I32,  nil, nil, 0);
	ctx.type_u8      = type_make(string_make("u8", 2),   TYPE_U8,   nil, nil, 0);

	scope_push(SCOPE_GLOBAL);
	ctx.global = ctx.scope;

	ctx.linenumber = 1;
	ctx.filename = "<stdin>";
}

